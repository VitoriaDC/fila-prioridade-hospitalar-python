# -*- coding: utf-8 -*-
"""Lista Encadeada0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SxX0rjLQHh9o02LF_kq257bK9XgXHyiR
"""

class Nodo:
    def __init__(self, numero, cor):
        self.numero = numero
        self.cor = cor
        self.proximo = None

class ListaEncadeada:
    def __init__(self):
        self.head = None
        self.contador_v = 1  # Numeração para cartões verdes
        self.contador_a = 201  # Numeração para cartões amarelos

    def inserirSemPrioridade(self, nodo):
        """
        Insere um nodo no final da lista. Usado para cartões 'V'.
        """
        if self.head is None:
            self.head = nodo
        else:
            atual = self.head
            while atual.proximo:
                atual = atual.proximo
            atual.proximo = nodo

    def inserirComPrioridade(self, nodo):
        """
        Insere um nodo com prioridade ('A') na posição correta.
        Regras:
        - Após todos os nodos 'A' existentes.
        - Antes de todos os nodos 'V'.
        - Entre os 'A's, os de numeração menor vêm antes.
        """
        if self.head is None:
            self.head = nodo
            return

        # Caso 1: Inserir antes do head se o head for 'V' ou se o novo 'A' tiver menor número que o head 'A'
        if nodo.cor == 'A':
            if self.head.cor == 'V' or (self.head.cor == 'A' and nodo.numero < self.head.numero):
                nodo.proximo = self.head
                self.head = nodo
                return

            atual = self.head
            anterior = None

            # Percorre a lista para encontrar a posição correta
            while atual and atual.cor == 'A':
                if nodo.numero < atual.numero:
                    break  # Encontrou um 'A' maior, insere antes
                anterior = atual
                atual = atual.proximo

            # Se saiu do loop porque encontrou um 'V' ou o final da lista,
            # ou porque o novo 'A' é maior que todos os 'A's anteriore
            nodo.proximo = atual
            if anterior:
                anterior.proximo = nodo
            else: # Este caso já deveria ter sido tratado pelo if inicial, mas é um fallback
                self.head = nodo
        else: # Se a cor é 'V', trata como sem prioridade
            self.inserirSemPrioridade(nodo)


    def inserir(self):
        """
        Solicita a cor, atribui o número e insere o paciente na fila.
        """
        while True:
            cor = input("Informe a cor do cartão (A/V): ").strip().upper()
            if cor in ['A', 'V']:
                break
            else:
                print("Cor inválida. Por favor, digite 'A' para Amarelo ou 'V' para Verde.")

        if cor == 'V':
            numero = self.contador_v
            self.contador_v += 1
        else:  # cor == 'A'
            numero = self.contador_a
            self.contador_a += 1

        novo_nodo = Nodo(numero, cor)

        # Se a lista estiver vazia, o novo nodo é a cabeça
        if self.head is None:
            self.head = novo_nodo
        elif cor == 'V':
            self.inserirSemPrioridade(novo_nodo)
        else:  # cor == 'A'
            self.inserirComPrioridade(novo_nodo)

    def imprimirListaEspera(self):
        """
        Imprime todos os cartões e seus respectivos números na lista.
        """
        if self.head is None:
            print("Lista de espera vazia.")
            return

        atual = self.head
        lista_str = "Lista ->"
        while atual:
            lista_str += f" [{atual.cor},{atual.numero}]"
            atual = atual.proximo
        print(lista_str)

    def atenderPaciente(self):
        """
        Remove o primeiro paciente da fila e imprime uma mensagem de atendimento.
        """
        if self.head is None:
            print("Não há pacientes na fila para atendimento.")
            return

        paciente_atendido = self.head
        self.head = self.head.proximo
        print(f"Atendendo o paciente cartão cor {paciente_atendido.cor} e número {paciente_atendido.numero}")

def menu():
    """
    Implementa o menu principal do sistema de triagem.
    """
    fila_hospital = ListaEncadeada()

    while True:
        print("\n1 - Adicionar paciente a fila")
        print("2 - Mostrar pacientes na fila")
        print("3 - Chamar paciente")
        print("4 - Sair")

        try:
            opcao = int(input(">>"))
        except ValueError:
            print("Opção inválida. Por favor, digite um número de 1 a 4.")
            continue

        if opcao == 1:
            fila_hospital.inserir()
        elif opcao == 2:
            fila_hospital.imprimirListaEspera()
        elif opcao == 3:
            fila_hospital.atenderPaciente()
        elif opcao == 4:
            print("Encerrando o programa.")
            break
        else:
            print("Opção inválida. Por favor, digite um número de 1 a 4.")

if __name__ == "__main__":
    menu()